pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5')) // Keep only the last 5 builds
        timestamps() // Add timestamps to logs
    }

tools {
        maven 'Maven' // Use the name you configured in Global Tool Configuration
    }

    stages {
        stage('Preparation') {
            steps {
                echo "Starting the pipeline for ${env.JOB_NAME}"
                sh './mvnw --version' // Check Maven version
            }
        }

        stage('Build and Test') {
    steps {
        echo "Starting SonarQube scan..."
        sh '''
            mvn clean verify sonar:sonar \
                -Dsonar.projectKey=Homework1 \
                -Dsonar.projectName="Homework1" \
                -Dsonar.host.url=http://34.87.163.238:9000 \
                -Dsonar.token=sqp_16d07aafa3d58225727bd0d1edb4482f5b9ec919
        '''
    }
}

        stage('SonarQube Scan') {
            steps {
                echo "Starting SonarQube scan..."
                withSonarQubeEnv('SonarQube') { // Use the configured SonarQube environment 'SonarQube'
                    sh './mvnw sonar:sonar -Dsonar.java.binaries=target/classes' // Scan after build
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    echo "Waiting for SonarQube quality gate results..."
                    timeout(time: 30, unit: 'MINUTES') { // Set a timeout of 30 minutes
                        def qualityGate = waitForQualityGate() // Wait for the quality gate results
                        if (qualityGate.status != 'OK') {
                            error "Pipeline failed due to quality gate failure: ${qualityGate.status}"
                        }
                        echo "SonarQube analysis results available at: ${env.BUILD_URL}/sonarqube"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully for ${env.JOB_NAME}."
        }
        failure {
            echo "❌ Pipeline failed. Check logs for details."
        }
        always {
            echo "Pipeline execution finished."
        }
    }
}
